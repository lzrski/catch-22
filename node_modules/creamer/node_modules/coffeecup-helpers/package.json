{
  "author": {
    "name": "Tom Wilson",
    "email": "tom@jackhq.com"
  },
  "name": "coffeecup-helpers",
  "description": "A coffeecup module of html helpers",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/twilson63/coffeecup-helpers.git"
  },
  "main": "lib/helpers",
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": "0.6 || 0.7 || 0.8"
  },
  "dependencies": {
    "coffeecup": "*"
  },
  "devDependencies": {
    "should": "*"
  },
  "optionalDependencies": {},
  "readme": "# coffeecup helpers\n\n[![build status](https://secure.travis-ci.org/twilson63/coffeecup-helpers.png)](http://travis-ci.org/twilson63/coffeecup-helpers)\n\ncoffeecup helpers project is a set of helpers to add some sugar\nto generating forms and twitter bootstrap classes\n\n### install\n\n`npm install coffeecup-helpers`\n\n### usage\n\n``` coffeescript\ncc = require 'coffeecup'\nhelpers = require 'coffeecup-helpers'\n\ntemplate = ->\n  form ->\n    p ->\n      textField 'name', class: 'small'\n\ncc.render template, hardcode: helpers\n```\n\n### output\n\n``` html\n<form>\n  <p>\n    <label for=\"name\">Name</label>\n    <input name=\"name\" id=\"name\" type=\"text\" />\n  </p>\n</form>\n```\n\n\n## api\n\n# textField(name, value, attributes)\n\ngenerate label and input type text element.\n\nparams\n\nParameter  |  Type  |  Required  | Description\n-----------|--------|------------|----------------------\nname       | string | optional   | input element name attribute and label display\nvalue      | string | optional   | input element value attribute\nattributes | object | optional   | object containing both input and label attributes\n\nusage\n\n``` coffeescript\ntemplate = ->\n form ->\n   p ->\n     textField 'name', label: { class: 'foo' }, input: { class: 'bar'}\n```\n\noutput\n\n``` html\n<form>\n  <p>\n    <label class=\"foo\" for=\"name\">Name</label>\n    <input class=\"bar\" name=\"name\" id=\"name\" type=\"text\" />\n  </p>\n</form>\n```\n\n# passwordField(name, value, attributes)\n\ngenerate label and input type text element.\n\nparams\n\nParameter  |  Type  |  Required  | Description\n-----------|--------|------------|----------------------\nname       | string | optional   | input element name attribute and label display\nvalue      | string | optional   | input element value attribute\nattributes | object | optional   | object containing both input and label attributes\n\nusage\n\n``` coffeescript\ntemplate = ->\n form ->\n   p ->\n     textField 'name', label: { class: 'foo' }, input: { class: 'bar'}\n```\n\noutput\n\n``` html\n<form>\n  <p>\n    <label class=\"foo\" for=\"name\">Name</label>\n    <input class=\"bar\" name=\"name\" id=\"name\" type=\"password\" />\n  </p>\n</form>\n```\n\n---\n\n### Bootstrap Form Controls\n\n### textControl(name, value, attributes)\n\ngenerates form text control with help text\n\nparams\n\nParameter  |  Type  |  Required  | Description\n-----------|--------|------------|----------------------\nname       | string | optional   | input element name attribute and label display\nvalue      | string | optional   | input element value attribute\nattributes | object | optional   | object containing both input and label attributes as well as help text\n\nusage\n\n``` coffeescript\nt = ->\n  textControl 'foo', help: 'Help text here'\ncoffeecup.render(t, {hardcode})\n```\n\noutput\n\n``` html\n<div class=\"control-group\">\n  <label for=\"foo\" class=\"control-label\">Foo</label>\n  <div class=\"controls\">\n    <input name=\"foo\" id=\"foo\" type=\"text\" />\n    <p class=\"help-block\">Help text here</p>\n  </div>\n</div>\n```\n\n### passwordControl(name, value, attributes)\n\ngenerates form password control with help text\n\nparams\n\nParameter  |  Type  |  Required  | Description\n-----------|--------|------------|----------------------\nname       | string | optional   | input element name attribute and label display\nvalue      | string | optional   | input element value attribute\nattributes | object | optional   | object containing both input and label attributes as well as help text\n\nusage\n\n``` coffeescript\nt = ->\n  textControl 'foo', help: 'Help text here'\ncoffeecup.render(t, {hardcode})\n```\n\noutput\n\n``` html\n<div class=\"control-group\">\n  <label for=\"foo\" class=\"control-label\">Foo</label>\n  <div class=\"controls\">\n    <input name=\"foo\" id=\"foo\" type=\"password\" />\n    <p class=\"help-block\">Help text here</p>\n  </div>\n</div>\n```\n",
  "readmeFilename": "readme.md",
  "_id": "coffeecup-helpers@0.1.1",
  "_from": "coffeecup-helpers@0.1.1"
}
